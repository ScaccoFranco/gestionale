services:
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - rete-proxy  # <-- MODIFICATO

  web:
    build: .
    command: gunicorn gestionale.wsgi:application --bind 0.0.0.0:8000 --timeout 120
    # NOTA: Rimuovi la riga 'volumes: - .:/app' per la produzione
    # se il tuo Dockerfile copia giÃ  il codice con "COPY . ."
    volumes:
      - ./static:/app/static # Aggiunto per i file statici
    expose:
      - "8000"
    environment:
      DEBUG: ${DEBUG}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - rete-proxy  # <-- MODIFICATO

  app:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # Porte pubbliche standard
      - '80:80'   # HTTP
      - '443:443' # HTTPS
      # Porta per l'interfaccia web di NPM
      - '81:81'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    networks:
      # Collegalo alla rete condivisa che abbiamo creato
      - rete-proxy

volumes:
  postgres_data:

networks:
  rete-proxy:  # <-- MODIFICATO
    external: true
